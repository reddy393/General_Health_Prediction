# -*- coding: utf-8 -*-
"""MAJOR PROJECT

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OlfykQ_nNS3m2fgnSfZc7dx9RoveRUCs
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.impute import SimpleImputer
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = '/content/CVD_cleaned.csv'  # Update the path
data = pd.read_csv(file_path)

# Encode categorical variables
label_encoders = {}
for column in data.select_dtypes(include=['object']).columns:
    label_encoders[column] = LabelEncoder()
    data[column] = label_encoders[column].fit_transform(data[column])

# Handle missing values by imputing the mean
imputer = SimpleImputer(strategy='mean')
data_imputed = pd.DataFrame(imputer.fit_transform(data), columns=data.columns)

# Define features (X) and target (Y)
X = data_imputed.drop('Heart_Disease', axis=1)
Y = data_imputed['Heart_Disease']

# Split the dataset (80% train, 20% test)
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)
data.head()

# Initialize the models
svm_model = SVC()
rf_model = RandomForestClassifier()
lr_model = LogisticRegression(max_iter=1000)

# Train the models
svm_model.fit(X_train, Y_train)
rf_model.fit(X_train, Y_train)
lr_model.fit(X_train, Y_train)

# Predict using the models
svm_pred = svm_model.predict(X_test)
rf_pred = rf_model.predict(X_test)
lr_pred = lr_model.predict(X_test)

# Evaluate the models
models = ['SVM', 'Random Forest', 'Logistic Regression']
predictions = [svm_pred, rf_pred, lr_pred]

# Create a dictionary to store the performance results
model_performance = {}

for model_name, pred in zip(models, predictions):
    accuracy = accuracy_score(Y_test, pred)
    classification_rep = classification_report(Y_test, pred)
    confusion_mat = confusion_matrix(Y_test, pred)
    model_performance[model_name] = {
        "accuracy": accuracy,
        "classification_report": classification_rep,
        "confusion_matrix": confusion_mat
    }

# Display the performance
for model_name in models:
    print(f"Model: {model_name}")
    print("Accuracy Score:", model_performance[model_name]["accuracy"])
    print("Classification Report:\n", model_performance[model_name]["classification_report"])
    print("Confusion Matrix:\n", model_performance[model_name]["confusion_matrix"])
    print("\n")

# Visualize confusion matrices
plt.figure(figsize=(12, 4))

for i, model_name in enumerate(models):
    plt.subplot(1, 3, i+1)
    sns.heatmap(model_performance[model_name]["confusion_matrix"], annot=True, fmt='d', cmap='Blues')
    plt.title(f"{model_name} Confusion Matrix")
    plt.xlabel('Predicted')
    plt.ylabel('Actual')

plt.tight_layout()
plt.show()